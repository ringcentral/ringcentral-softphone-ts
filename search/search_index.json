{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RingCentral Cloud Phone SDK","text":"<p>The RingCentral Cloud Phone SDK helps developers connect to authorized live phone calls in a safe and secure way in order to access and/or manipulate a call's audio stream. In the world of artificial intelligence, this SDK is a critical tool in creating agents, extracting audio, injecting audio, generating transcripts, and more.</p> <p>Get started with the Cloud Phone SDK</p>"},{"location":"#supported-cloud-phone-sdk-features","title":"Supported Cloud Phone SDK features","text":"<ul> <li> Receive audio stream from peer</li> <li> Stream local audio to remote peer</li> <li> Receive inbound calls</li> <li> Make outbound calls</li> <li> Receive DTMF tones</li> <li> Send DTMF tones</li> <li> Reject inbound calls</li> <li> Cancel outbound calls</li> <li> Hangup active calls</li> <li> Transfer calls</li> </ul>"},{"location":"#evolution-of-the-sdk","title":"Evolution of the SDK","text":"<p>This SDK began its life as the now-retired RingCentral Softphone SDK for JavaScript, which was originally built on SIP over WebSocket (WSS) and used WebRTC for audio handling.</p> <p>To improve reliability, scalability, and audio security, we re-architected the SDK from the ground up. The result was the RingCentral Softphone SDK for TypeScript, which adopted SIP over TLS and SRTP for encrypted audio transmission.</p> <p>With the shift toward broader capabilities beyond a softphone, we've rebranded it as the RingCentral Cloud Phone SDK \u2014 a modern, extensible foundation for building real-time voice applications.</p>"},{"location":"audio/","title":"Working with audio using the Cloud Phone SDK","text":"<p>Two of the Cloud Phone SDK's most popular uses is to gain direct access to the audio streams of a phone call. To see code samples for these two use cases, consult the links below.</p> <ul> <li> <p> Receive audio stream from   peer</p> <p>Tap into the audio stream of a phone call and pipe the stream to a file, or translator, or transcription engine.</p> <p> See example code</p> </li> <li> <p> Stream local audio to remote peer</p> <p>Tap into the audio stream of a phone call and inject your own custom audio. Play audio from a file, or stream audio from a speech synthesizer.</p> <p> See example code</p> </li> </ul>"},{"location":"audio/#selecting-the-right-right-audio-codec","title":"Selecting the right right audio codec","text":"<p>The Cloud Phone SDK supports the following audio codecs:</p> Codec Sample rate Channels Description <code>OPUS/16000</code> (default) 16 kHz Mono Best for telephony. High quality, but low bitrates and low latency <code>OPUS/48000/2</code> 48 kHz Stereo Best for music and full-band audio, but requires more bandwidth and CPU power <code>PCMU/8000</code> 8 kHz Mono Widely supported in PSTN and SIP networks, but poorest overall audio quality <p>Here is a quick selection guide for common use cases:</p> Scenario Recommended codec Voice chat with good quality OPUS/16000 High-fidelity stereo audio OPUS/48000/2 Interoperability with legacy phones PCMU/8000 Mixed voice and music OPUS/48000/2 Low-bandwidth VoIP OPUS/16000"},{"location":"audio/#setting-the-audio-codec","title":"Setting the audio codec","text":"<p>One is able to select their preferred audio codec when instantiating a Cloud Phone instance.</p> <pre><code>import Softphone from \"ringcentral-softphone\";\n\nconst softphone = new Softphone({\n    codec: \"PCMU/8000\",\n    // ...\n});\n</code></pre>"},{"location":"audio/#working-with-audio-codecs","title":"Working with audio codecs","text":""},{"location":"audio/#opus16000","title":"OPUS/16000","text":"<ul> <li>The codec used between server and client is \"OPUS/16000\". This SDK will auto   decode/encode the codec to/from \"uncompressed PCM\".</li> <li>The bitrate is 16, which means 16 bits per sample. Sample rate is 16000, which   means 16000 samples per second. Encoding is \"signed-integer\".</li> </ul> <p>You may play saved audio using the following commands.</p> play commandffmpeg command <pre><code>play -t raw -b 16 -r 16000 -e signed-integer test.wav\n</code></pre> <p>To stream an audio file to remote peer, you need to make sure that the audio file is playable by the command above.</p> <pre><code>ffplay -autoexit -f s16le -ar 16000 test.wav\n</code></pre>"},{"location":"audio/#pcmu8000","title":"PCMU/8000","text":"<p>If you choose this codec, make sure audio is playable using the following command:</p> play commandffplay command <pre><code>play -b 8 -r 8000 -e mu-law test.raw\n</code></pre> <p>If the file's extension is <code>.wav</code>, then <code>play</code> will complain</p> <p><pre><code>play FAIL formats: can't open input file `6fdbbf2f-74fe-437a-b5a7-80c0c546baf0.wav': WAVE: RIFF header not found\n</code></pre> To fix, change the file extension to <code>.raw</code> or use <code>ffplay</code> instead.</p> <pre><code>ffplay -autoexit -f mulaw -ar 8000 test.wav\n</code></pre>"},{"location":"audio/#opus480002","title":"OPUS/48000/2","text":"<p>If you choose this codec, make sure audio is playable using the following command:</p> <p>=== \"play command\" <code>play -t raw -b 16 -r 48000 -e signed-integer -c 2 test.wav</code></p>"},{"location":"audio/#generating-an-audio-file-for-testing","title":"Generating an audio file for testing","text":"MacOSWindowsLinux <pre><code>say \"Hello world\" -o test.wav --data-format=LEI16@16000\n</code></pre> <p>The audio file generated can be used for codec OPUS/16000</p> <p>Please consider contributing an example command to help Windows users</p> <p>Please consider contributing an example command to help Linux users</p>"},{"location":"get-started/","title":"Getting started with the Cloud Phone SDK","text":"<p>The primary task in getting started using the Cloud Phone SDK is to obtaining the necessary credentials and information for the Cloud Phone SDK to connect to your device.</p>"},{"location":"get-started/#install-the-sdk","title":"Install the SDK","text":"<p>The SDK is available from npmjs and can be installed by the standard mechanisms.</p> <pre><code>yarn install ringcentral-softphone\n</code></pre>"},{"location":"get-started/#obtaining-credentials","title":"Obtaining credentials","text":"<p>There are two ways to find the credentials needed to connect to a device using the Soft Phone SDK. You can navigate the RingCentral application and obtain credentials through our user interface, or you can fetch them programmatically via the API.</p>"},{"location":"get-started/#using-the-admin-portal-to-obtain-credentials","title":"Using the Admin Portal to obtain credentials","text":"<ol> <li> <p>Login to the RingCentral Admin Portal</p> </li> <li> <p>Then, navigate to the user or extension that you will be binding the Cloud    Phone SDK to.</p> </li> <li> <p>Expand the section called \"Devices &amp; Numbers\"    </p> </li> <li> <p>In the list of phones found under \"Devices &amp; Numbers,\" select the device you    want to use.</p> </li> </ol> <p>!!! warning \"The phone type must be 'Existing Phone'\" If the user does not    have a phone of this type, you may need to create one. The Cloud Phone SDK    will not work with \"RingCentral Desktop app\" phone types.    </p> <ol> <li> <p>Click the \"Set Up and Provision\" button    </p> </li> <li> <p>Click the link \"Set up manually using SIP\"    </p> </li> </ol> <p>On the resulting page you will find the following fields:</p> <ul> <li>SIP Domain</li> <li>Outbound Proxy</li> <li>User Name</li> <li>Password</li> <li>Authorization ID</li> </ul> <p></p> <p>!!! info \"The SIP Domain's port number is not necessary to connect\" On the credentials page you will observe that the \"SIP Domain\" field shows a port number. You can safely ignore this port number when connecting to a device.</p>"},{"location":"get-started/#obtaining-cloud-phone-credentials-via-the-api","title":"Obtaining Cloud Phone credentials via the API","text":"<p>Alternatively, you can obtain the connection and credential information you need via a RingCentral REST API.</p> <p>Please note: this technique requires familiarity with the RingCentral REST API. If you have never used this API, please consult our getting started guide.</p>"},{"location":"get-started/#find-appropriate-device","title":"Find appropriate device","text":"<p>You will first need to obtain a list of devices for an extension using the list extension devices endpoint. In the response you will find the devices type:</p> List extension devices response (excerpt) <pre><code>{\n  \"uri\" : \"https://platform.ringcentral.com/restapi/v1.0/account/1508191004/extension/1508193004/device?page=1&amp;perPage=1\",\n  \"records\" : [ {\n    \"uri\" : \"https://platform.ringcentral.com/restapi/v1.0/account/1508191004/device/228113004\",\n    \"id\" : \"228113004\",\n    \"type\" : \"HardPhone\",\n    \"sku\" : \"HP-37\",\n    \"model\" : {\n      \"id\" : \"37\",\n      \"name\" : \"Polycom IP 6000 Conference Phone\",\n      \"lineCount\" : 2,\n      \"addons\" : [ ],\n      \"features\" : [ ]\n    },\n    \"name\" : \"Polycom IP 6000 Conference Phone\",\n    \"status\" : \"Offline\",\n    // truncated for brevity\n  }]\n}\n</code></pre> <p>!!! warning \"Only 'Other Phone' types are supported by Cloud Phone SDK\" As stated previously, not every device can be used with the Cloud Phone SDK. Only devices with a type of <code>Other Phone</code> are supported. Any other type will not work with the SDK.</p> <p>!!! info \"'Other Phone' type is equivalent to 'Existing Phone' as seen in Admin Portal\"</p> <p>If you cannot find an appropriate device via the API, then you will need to create a device manually. Please refer to previous section.</p>"},{"location":"get-started/#read-device-info","title":"Read device info","text":"<p>Using the <code>id</code> of the selected device, call the read device SIP info REST API. A response from this API has the following information you will need:</p> <ul> <li><code>userName</code></li> <li><code>password</code></li> <li><code>authorizationId</code></li> <li><code>proxy</code></li> </ul> Read Device SIP Info Response <pre><code>{\n  \"domain\": \"sip.ringcentral.com\",\n  \"userName\": \"16501234567\",\n  \"password\": \"password\",\n  \"authorizationId\": \"802512345678\",\n  \"outboundProxies\": [\n    {\n      \"region\": \"NA\",\n      \"proxy\": \"sip20.ringcentral.com:5090\",\n      \"proxyTLS\": \"sip20.ringcentral.com:5096\"\n    },\n    {\n      \"region\": \"EMEA\",\n      \"proxy\": \"sip40.ringcentral.com:5090\",\n      \"proxyTLS\": \"sip40.ringcentral.com:5096\"\n    },\n    {\n      \"region\": \"APAC\",\n      \"proxy\": \"sip71.ringcentral.com:5090\",\n      \"proxyTLS\": \"sip71.ringcentral.com:5096\"\n    },\n    {\n      \"region\": \"LATAM\",\n      \"proxy\": \"sip80.ringcentral.com:5090\",\n      \"proxyTLS\": \"sip80.ringcentral.com:5096\"\n    }\n    ...\n  ]\n}\n</code></pre> <p>View demo source code{ .md-button }</p> <p>You will need to choose a outboundProxy value based on your location. And please choose the <code>proxyTLS</code> value because this SDK uses TLS. For example if you live in north America, choose <code>sip10.ringcentral.com:5096</code>.</p>"},{"location":"get-started/#initializing-the-sdk","title":"Initializing the SDK","text":"<p>Once you have obtained your device's credentials, you can connect to the device and begin receiving events.</p> <pre><code>import Softphone from \"ringcentral-softphone\";\n\nconst softphone = new Softphone({\n  domain: process.env.SIP_DOMAIN,\n  outboundProxy: process.env.SIP_OUTBOUND_PROXY,\n  username: process.env.SIP_USERNAME,\n  password: process.env.SIP_PASSWORD,\n  authorizationId: process.env.SIP_AUTHORIZATION_ID,\n});\nsoftphone.enableDebugMode(); // Optionally enable debug mode to print all SIP messages\nawait softphone.register();\n// at this point the phone is ready\n</code></pre> <p>Creating multiple instances with the same credentials</p> <p>One can run multiple instances of a cloud phone using the same credentials without causing an error. However, only the most recently created instance will receive inbound calls.</p>"},{"location":"support/","title":"Support","text":"<ul> <li> Get help from the community</li> <li> File a bug report</li> </ul>"},{"location":"support/#troubleshooting-common-issues","title":"Troubleshooting common issues","text":""},{"location":"support/#how-to-retrieve-the-telephony-session-id","title":"How to retrieve the telephony session ID","text":"<p>For outbound calls, you will be able to find header like the following from the <code>callSession.sipMessage.headers</code> property:</p> <pre><code>p-rc-api-ids: party-id=p-a0d17e323f0fez1953f50f90dz296e3440000-1;session-id=s-a0d17e323f0fez1953f50f90dz296e3440000\n</code></pre> <p>However, for inbound calls, the server doesn't tell us anything about the Telephony Session ID for which there is a workaround solution.</p>"},{"location":"support/#how-to-handle-the-sip20-486-busy-here-message-for-outbound-calls","title":"How to handle the \"SIP/2.0 486 Busy Here\" message for outbound calls","text":"<p>Check the following if you receive this error:</p> <ul> <li>Make sure that the target number is valid. If the target number is invalid, you will get <code>SIP/2.0 486 Busy Here</code>.</li> <li>Make sure that the device has a \"Emergency Address\" configured in the RingCentral Admin Portal.</li> <li>Make sure there are no complaints about the selected emergency address by checking the details of the device. If the Emergency Address is not configured properly, outbound call will not work.</li> </ul>"},{"location":"examples/answer-call/","title":"Answer a phone call on a server","text":"<pre><code>import fs from \"node:fs\";\nimport process from \"node:process\";\nimport type { RtpPacket } from \"werift-rtp\";\nimport Softphone from \"../src/index.js\";\n\nconst softphone = new Softphone({\n  outboundProxy: process.env.SIP_INFO_OUTBOUND_PROXY!,\n  username: process.env.SIP_INFO_USERNAME!,\n  password: process.env.SIP_INFO_PASSWORD!,\n  authorizationId: process.env.SIP_INFO_AUTHORIZATION_ID!,\n  domain: process.env.SIP_INFO_DOMAIN!,\n});\nsoftphone.enableDebugMode(); // print all SIP messages\n\nconst main = async () =&gt; {\n  await softphone.register();\n  // detect inbound call\n  softphone.on(\"invite\", async (inviteMessage) =&gt; {\n    // decline the call\n    // await waitFor({ interval: 1000 });\n    // await softphone.decline(inviteMessage);\n    // answer the call\n    const callSession = await softphone.answer(inviteMessage);\n\n    // do something with the call session\n  });\n};\nmain();\n</code></pre>"},{"location":"examples/record-audio/","title":"Record phone audio to a server","text":"<pre><code>import fs from \"node:fs\";\nimport process from \"node:process\";\nimport type { RtpPacket } from \"werift-rtp\";\nimport Softphone from \"../src/index.js\";\n\nconst softphone = new Softphone({\n  outboundProxy: process.env.SIP_INFO_OUTBOUND_PROXY!,\n  username: process.env.SIP_INFO_USERNAME!,\n  password: process.env.SIP_INFO_PASSWORD!,\n  authorizationId: process.env.SIP_INFO_AUTHORIZATION_ID!,\n  domain: process.env.SIP_INFO_DOMAIN!,\n});\nsoftphone.enableDebugMode(); // print all SIP messages\n\nconst main = async () =&gt; {\n  await softphone.register();\n  // detect inbound call\n  softphone.on(\"invite\", async (inviteMessage) =&gt; {\n    const callSession = await softphone.answer(inviteMessage);\n    // receive audio\n    const writeStream = fs.createWriteStream(`${callSession.callId}.wav`, {\n      flags: \"a\",\n    });\n    callSession.on(\"audioPacket\", (rtpPacket: RtpPacket) =&gt; {\n      writeStream.write(rtpPacket.payload);\n    });\n    callSession.once(\"disposed\", () =&gt; {\n      writeStream.close();\n    });\n  });\n};\nmain();\n</code></pre>"},{"location":"examples/stream-audio/","title":"Stream or play audio into a phone call","text":"<pre><code>import fs from \"node:fs\";\nimport process from \"node:process\";\nimport type { RtpPacket } from \"werift-rtp\";\nimport Softphone from \"../src/index.js\";\n\nconst softphone = new Softphone({\n  outboundProxy: process.env.SIP_INFO_OUTBOUND_PROXY!,\n  username: process.env.SIP_INFO_USERNAME!,\n  password: process.env.SIP_INFO_PASSWORD!,\n  authorizationId: process.env.SIP_INFO_AUTHORIZATION_ID!,\n  domain: process.env.SIP_INFO_DOMAIN!,\n});\nsoftphone.enableDebugMode(); // print all SIP messages\n\nconst main = async () =&gt; {\n  await softphone.register();\n  // detect inbound call\n  softphone.on(\"invite\", async (inviteMessage) =&gt; {\n    // answer the call\n    const callSession = await softphone.answer(inviteMessage);\n\n    // send audio to remote peer\n    const streamer = callSession.streamAudio(fs.readFileSync('demos/test.wav'));\n    // You may subscribe to the 'finished' event of the streamer to \n    // know when the audio sending is finished\n    streamer.once('finished', () =&gt; {\n      console.log('audio sending finished');\n    });\n    // you may pause/resume/stop audio sending at any time\n    // streamer.pause();\n    // streamer.resume();\n    // streamer.stop();\n    // streamer.start();\n  });\n};\nmain();\n</code></pre>"},{"location":"examples/transfer-call/","title":"Transfer a phone call from a server","text":"<pre><code>import fs from \"node:fs\";\nimport process from \"node:process\";\nimport type { RtpPacket } from \"werift-rtp\";\nimport Softphone from \"../src/index.js\";\n\nconst softphone = new Softphone({\n  outboundProxy: process.env.SIP_INFO_OUTBOUND_PROXY!,\n  username: process.env.SIP_INFO_USERNAME!,\n  password: process.env.SIP_INFO_PASSWORD!,\n  authorizationId: process.env.SIP_INFO_AUTHORIZATION_ID!,\n  domain: process.env.SIP_INFO_DOMAIN!,\n});\nsoftphone.enableDebugMode(); // print all SIP messages\n\nconst main = async () =&gt; {\n  await softphone.register();\n  // detect inbound call\n  softphone.on(\"invite\", async (inviteMessage) =&gt; {\n    // answer the call\n    const callSession = await softphone.answer(inviteMessage);\n    // call transfer\n    await callSession.transfer(process.env.ANOTHER_CALLEE_FOR_TESTING!);\n  });\n};\nmain();\n</code></pre>"},{"location":"reference/answer/","title":"softPhone.answer()","text":"<p>Answers an incoming call so that you can attach yourself to it.</p>"},{"location":"reference/answer/#sample","title":"Sample","text":"<pre><code>softphone.on(\"invite\", async (inviteMessage) =&gt; {\n  const callSession = await softphone.answer(inviteMessage);\n});\n</code></pre>"},{"location":"reference/answer/#inputs","title":"Inputs","text":"Parameter Description <code>inviteMessage</code> A SIP invite message from remote peer."},{"location":"reference/answer/#outputs","title":"Outputs","text":"Parameter Description <code>callSession</code> A callSession object."},{"location":"reference/answered/","title":"callSession.on('answered', callback)","text":""},{"location":"reference/answered/#sample","title":"Sample","text":"<pre><code>callSession.once(\"answered\", () =&gt; {\n  // outbound callSession is answered\n  // there is no such event for inbound call. Because for inbound call it is YOU who answer it\n});\n</code></pre>"},{"location":"reference/audioPacket/","title":"callSession.on('audioPacket', callback)","text":""},{"location":"reference/audioPacket/#callback-inputs","title":"Callback inputs","text":"Parameter Description <code>rtpPacket</code>"},{"location":"reference/audioPacket/#sample","title":"Sample","text":"<pre><code>callSession.on(\"audioPacket\", (rtpPacket: RtpPacket) =&gt; {\n    // received a rtpPacket which is audio data\n});\n</code></pre>"},{"location":"reference/busy/","title":"callSession.on('busy', callback)","text":"<p>This event is triggered when a call is made to an invalid number, or when the SIP server returns <code>SIP/2.0 486 Busy Here</code>. Upon triggering the busy event, the call session will be disposed of.</p>"},{"location":"reference/busy/#sample","title":"Sample","text":"<pre><code>callSession.on(\"busy\", () =&gt; {\n  // do something with the call\n  console.log(\"cannot reach the callee number\");\n});\n</code></pre>"},{"location":"reference/call/","title":"cloudPhone.call()","text":"<p>Initiates a phone call to a phone number and establishes a call session. </p>"},{"location":"reference/call/#sample","title":"Sample","text":"<pre><code>const callSession = await cloudPhone.call(callee);\n</code></pre>"},{"location":"reference/call/#inputs","title":"Inputs","text":"Parameter Description <code>callee</code> The phone number you want to call. Format is <code>16506668888</code>."},{"location":"reference/call/#outputs","title":"Outputs","text":"Parameter Description <code>callSession</code> A call session."},{"location":"reference/callId/","title":"callSession.callId","text":"<p>Returns the call ID of the call session's current call.</p> <p>This is the <code>Call-ID</code> header in SIP message.</p>"},{"location":"reference/callId/#inputs","title":"Inputs","text":"<p>None.</p>"},{"location":"reference/callId/#outputs","title":"Outputs","text":"Parameter Description <code>callId</code> A string representing the current call's ID"},{"location":"reference/decline/","title":"cloudPhone.decline()","text":"<p>Decline an incoming call. This is similar to how you decline a incoming call by pressing the \"red button\".</p> <p>The call may go to voicemail, depending on your account settings.</p>"},{"location":"reference/decline/#sample","title":"Sample","text":"<pre><code>await cloudPhone.decline();\n</code></pre>"},{"location":"reference/decline/#inputs","title":"Inputs","text":"<p>None.</p>"},{"location":"reference/decline/#outputs","title":"Outputs","text":"<p>None.</p>"},{"location":"reference/disposed/","title":"callSession.on('disposed', callback)","text":""},{"location":"reference/disposed/#sample","title":"Sample","text":"<pre><code>callSession.on(\"disposed\", () =&gt; {\n  // call session disposed\n  // this means either you or remote peer hang up\n});\n</code></pre>"},{"location":"reference/dtmf/","title":"callSession.on('dtmf', callback)","text":""},{"location":"reference/dtmf/#callback-inputs","title":"Callback inputs","text":"Parameter Description <code>dtmf</code> The key pressed by the user."},{"location":"reference/dtmf/#sample","title":"Sample","text":"<pre><code>callSession.on(\"dtmf\", (dtmf) =&gt; {\n    console.log(\"The user pressed the \" + dtmf + \" key.\");\n});\n</code></pre>"},{"location":"reference/dtmfPacket/","title":"callSession.on('dtmfPacket', callback)","text":""},{"location":"reference/dtmfPacket/#callback-inputs","title":"Callback inputs","text":"Parameter Description <code>dtmfPacket</code>"},{"location":"reference/dtmfPacket/#sample","title":"Sample","text":"<pre><code>callSession.on(\"dtmfPacket\", (dtmfPacket: DtmfPacket) =&gt; {\n    // received a packet which is about DTMF\n});\n</code></pre>"},{"location":"reference/enableDebugMode/","title":"cloudPhone.enableDebugMode()","text":"<p>Turn on debugging output. This will print all SIP messages.</p>"},{"location":"reference/enableDebugMode/#sample","title":"Sample","text":"<pre><code>await cloudPhone.enableDebugMode();\n</code></pre>"},{"location":"reference/enableDebugMode/#sample-debugging-output","title":"Sample debugging output","text":""},{"location":"reference/enableDebugMode/#inputs","title":"Inputs","text":"<p>None.</p>"},{"location":"reference/enableDebugMode/#outputs","title":"Outputs","text":"<p>None.</p>"},{"location":"reference/finished/","title":"streamer.on('finished', callback)","text":""},{"location":"reference/finished/#sample","title":"Sample","text":"<pre><code>streamer.on(\"finished\", () =&gt; {\n  // when you stream an audio file, this event tells you that the streaming has finished\n});\n</code></pre>"},{"location":"reference/hangup/","title":"callSession.hangup()","text":"<p>Hangs up the current call session's call.</p>"},{"location":"reference/hangup/#inputs","title":"Inputs","text":"<p>None.</p>"},{"location":"reference/hangup/#outputs","title":"Outputs","text":"<p>None.</p>"},{"location":"reference/invite/","title":"cloudPhone.on('invite', callback)","text":""},{"location":"reference/invite/#callback-inputs","title":"Callback inputs","text":"Parameter Description <code>message</code> A SIP invite message"},{"location":"reference/invite/#sample","title":"Sample","text":"<pre><code>cloudPhone.on(\"invite\", (message) =&gt; {\n    // received a SIP invige message, which means some one is calling you\n});\n</code></pre>"},{"location":"reference/message/","title":"cloudPhone.on('message', callback)","text":""},{"location":"reference/message/#callback-inputs","title":"Callback inputs","text":"Parameter Description <code>message</code> SIP messasge received"},{"location":"reference/message/#sample","title":"Sample","text":"<pre><code>cloudPhone.on(\"message\", (message) =&gt; {\n    // received SIP message from server\n});\n</code></pre>"},{"location":"reference/rtpPacket/","title":"callSession.on('rtpPacket', callback)","text":""},{"location":"reference/rtpPacket/#callback-inputs","title":"Callback inputs","text":"Parameter Description <code>rtpPacket</code>"},{"location":"reference/rtpPacket/#sample","title":"Sample","text":"<p>In the example below there are two active call sessions. The first one receives the RTP packet, and then forwards to packet to the second call session.</p> <pre><code>callSession.on(\"rtpPacket\", (rtpPacket: RtpPacket) =&gt; {\n  // received rtpPacket, and this packet may be about audio or dtmf\n  // you should not assume it is about audio\n});\n</code></pre>"},{"location":"reference/send/","title":"callSession.send(message)","text":"<p>Transmits a message to remote peer. This is very low level API, you probably do not need to invoke it directly.</p> <p>Based on this method, the SDK implements audio streaming and DTMF sending.</p>"},{"location":"reference/send/#inputs","title":"Inputs","text":"Parameter Description <code>message</code> A string or Buffer to transmit"},{"location":"reference/send/#outputs","title":"Outputs","text":"<p>None.</p>"},{"location":"reference/sendDtmf/","title":"callSession.sendDTMF(char)","text":"<p>Transmits a tone as if a user clicked a button on the dialpad. As you might expect, acceptable values are:</p> <ul> <li><code>0-9</code></li> <li><code>*</code></li> <li><code>#</code></li> </ul>"},{"location":"reference/sendDtmf/#inputs","title":"Inputs","text":"Parameter Description <code>character</code> A single character to transmit"},{"location":"reference/sendDtmf/#outputs","title":"Outputs","text":"<p>None.</p>"},{"location":"reference/sendPacket/","title":"callSession.sendPacket(rtpPacket)","text":"<p>Transmits an RTP packet to remote peer.</p> <p>And this rtpPacket could be either about audio or about DTMF. This is low-level API, you probably don't need to invoke it directly.</p>"},{"location":"reference/sendPacket/#inputs","title":"Inputs","text":"Parameter Description <code>rtpPacket</code> An RTP package"},{"location":"reference/sendPacket/#outputs","title":"Outputs","text":"<p>None.</p>"},{"location":"reference/streamAudio/","title":"callSession.streamAudio()","text":"<p>Streams an audio buffer into a phone call's audio stream.</p>"},{"location":"reference/streamAudio/#sample","title":"Sample","text":"<pre><code>const streamer = callSession.streamAudio(fs.readFileSync(\"demos/test.wav\"));\n</code></pre>"},{"location":"reference/streamAudio/#inputs","title":"Inputs","text":"Parameter Description <code>audio</code> A Buffer to stream."},{"location":"reference/streamAudio/#outputs","title":"Outputs","text":"Parameter Description <code>streamer</code> A Streamer object."},{"location":"reference/streamAudio/#streamer-object","title":"Streamer object","text":"<p>The streamer object supports four methods, that do exactly as their names imply:</p> <ul> <li><code>start()</code></li> <li><code>stop()</code></li> <li><code>pause()</code></li> <li><code>resume()</code></li> </ul>"},{"location":"reference/transfer/","title":"callSession.transfer(phoneNumber)","text":"<p>Tranfers a call to another phone number.</p>"},{"location":"reference/transfer/#sample","title":"Sample","text":"<pre><code>await callSession.transfer(\"5105551234\");\n</code></pre>"},{"location":"reference/transfer/#inputs","title":"Inputs","text":"Parameter Description <code>transferTo</code> A string representing the phone number to transfer the call to."},{"location":"reference/transfer/#outputs","title":"Outputs","text":"<p>None.</p>"}]}